name: Helm Integration Test

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed charts
        id: set-matrix
        run: |
          # Get changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Find changed charts
          CHANGED_CHARTS=()
          
          # Check if mw-kube-agent-v3 chart changed
          if echo "$CHANGED_FILES" | grep -E "^charts/mw-kube-agent-v3/" > /dev/null; then
            CHANGED_CHARTS+=("mw-kube-agent-v3")
          fi
          
          # Create matrix
          if [ ${#CHANGED_CHARTS[@]} -eq 0 ]; then
            echo "matrix={\"include\":[]}" >> "$GITHUB_OUTPUT"
            echo "No charts changed"
          else
            # Build JSON matrix manually
            MATRIX_JSON="{\"include\":["
            for i in "${!CHANGED_CHARTS[@]}"; do
              if [ $i -gt 0 ]; then
                MATRIX_JSON="$MATRIX_JSON,"
              fi
              MATRIX_JSON="$MATRIX_JSON{\"chart\":\"${CHANGED_CHARTS[$i]}\"}"
            done
            MATRIX_JSON="$MATRIX_JSON]}"
            
            echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"
            echo "Changed charts: ${CHANGED_CHARTS[*]}"
          fi

  integration-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.12.1

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0

      - name: Update Helm dependencies
        run: |
          helm dependency update ./charts/${{ matrix.chart }}

      - name: Install Helm Chart
        run: |
          helm install ${{ matrix.chart }}-test ./charts/${{ matrix.chart }} \
            --set global.mw.apiKey=${{ secrets.MW_API_KEY }} \
            --set global.mw.target=${{ secrets.MW_TARGET }} \
            --set global.clusterMetadata.name=integration-test-cluster \
            --namespace mw-agent-ns --create-namespace

      - name: Wait for Pods to be ready
        run: sleep 120
      
      - name: Check Pod status
        run: |
          kubectl get pods -n ${{ matrix.chart }}-test

      - name: Print logs for chart pods
        run: |
          
          echo "=== Getting all pods in namespace mw-agent-ns ==="
          PODS=$(kubectl get pods -n mw-agent-ns -o jsonpath='{.items[*].metadata.name}')
          echo "Found pods: $PODS"
          
          for POD in $PODS; do
            echo ""
            echo "=== Logs for pod $POD ==="
            kubectl logs -n mw-agent-ns $POD --all-containers=true --ignore-errors=true || echo "Could not get logs for $POD"
          done
      
      - name: Check if pods are running
        run: |
     
          echo "Checking pod status in namespace: mw-agent-ns"
          
          # Get all pods and their status
          kubectl get pods -n mw-agent-ns -o wide
          
          # Check for any non-running pods
          FAILED_PODS=$(kubectl get pods -n mw-agent-ns --field-selector=status.phase!=Running,status.phase!=Succeeded -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
          
          if [ -n "$FAILED_PODS" ]; then
            echo "❌ The following pods are not in Running/Succeeded state: $FAILED_PODS"
            echo ""
            echo "Pod details:"
            kubectl describe pods -n mw-agent-ns $FAILED_PODS
            exit 1
          else
            echo "✅ All pods are in Running/Succeeded state in namespace mw-agent-ns"
          fi

      - name: Sleep before cleanup
        run: sleep 10

      - name: Cleanup
        if: always()
        run: |
          helm uninstall ${{ matrix.chart }}-test -n ${{ matrix.chart }}-test || echo "Failed to uninstall"
          kubectl delete namespace mw-agent-ns || echo "Failed to delete namespace"